{"version":3,"file":"summaryService-Bg4GbFS5.js","sources":["../../src/integrations/api/services/summaryService.ts"],"sourcesContent":["import { API_BASE_URL } from '../client';\nimport { FilterState } from '@/types/filters';\n\n// Types for summary data - updated to match backend response\nexport interface SummaryStatusResponse {\n  total: number;\n  paid: number;\n  unpaid: number;\n  partially_paid: number;\n  cash_collected: number;\n  customer_deposited: number;\n  paid_pending_approval: number;\n  foreclose: number;\n  paid_rejected: number;\n}\n\n// Summary Service\nexport class SummaryService {\n  static async getSummaryStatus(\n    emiMonth: string, \n    filters?: Partial<FilterState>\n  ): Promise<SummaryStatusResponse> {\n    const queryParams = new URLSearchParams({\n      emi_month: emiMonth,\n    });\n\n    // Add filter parameters if provided\n    if (filters) {\n      if (filters.branch && filters.branch.length > 0) {\n        queryParams.append('branch', filters.branch.join(','));\n      }\n      if (filters.dealer && filters.dealer.length > 0) {\n        queryParams.append('dealer', filters.dealer.join(','));\n      }\n      if (filters.lender && filters.lender.length > 0) {\n        queryParams.append('lender', filters.lender.join(','));\n      }\n      if (filters.status && filters.status.length > 0) {\n        queryParams.append('status', filters.status.join(','));\n      }\n      if (filters.rm && filters.rm.length > 0) {\n        queryParams.append('rm_name', filters.rm.join(','));\n      }\n      if (filters.teamLead && filters.teamLead.length > 0) {\n        queryParams.append('tl_name', filters.teamLead.join(','));\n      }\n      if (filters.ptpDate && filters.ptpDate.length > 0) {\n        // Convert PTP date display labels to backend values\n        const ptpDateValues = filters.ptpDate.map(label => {\n          switch (label) {\n            case 'Overdue PTP': return 'overdue';\n            case 'Today\\'s PTP': return 'today';\n            case 'Tomorrow\\'s PTP': return 'tomorrow';\n            case 'Future PTP': return 'future';\n            case 'No PTP Date': return 'no_ptp';\n            default: return label.toLowerCase();\n          }\n        });\n        queryParams.append('ptp_date_filter', ptpDateValues.join(','));\n      }\n      if (filters.repayment && filters.repayment.length > 0) {\n        queryParams.append('repayment_id', filters.repayment.join(','));\n      }\n      // Note: demand_num filter is not currently in the frontend filters\n      // but can be added if needed\n    }\n\n    const response = await fetch(\n      `${API_BASE_URL}/summary/summary?${queryParams.toString()}`\n    );\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch summary status: ${response.status}`);\n    }\n\n    return await response.json();\n  }\n\n  // Helper method to get total applications count\n  static async getTotalApplications(\n    emiMonth: string, \n    filters?: Partial<FilterState>\n  ): Promise<number> {\n    const summary = await this.getSummaryStatus(emiMonth, filters);\n    return summary.total;\n  }\n\n  // Helper method to get paid applications count\n  static async getPaidApplications(\n    emiMonth: string, \n    filters?: Partial<FilterState>\n  ): Promise<number> {\n    const summary = await this.getSummaryStatus(emiMonth, filters);\n    return summary.paid;\n  }\n\n  // Helper method to get unpaid applications count\n  static async getUnpaidApplications(\n    emiMonth: string, \n    filters?: Partial<FilterState>\n  ): Promise<number> {\n    const summary = await this.getSummaryStatus(emiMonth, filters);\n    return summary.unpaid;\n  }\n\n  // Helper method to get partially paid applications count\n  static async getPartiallyPaidApplications(\n    emiMonth: string, \n    filters?: Partial<FilterState>\n  ): Promise<number> {\n    const summary = await this.getSummaryStatus(emiMonth, filters);\n    return summary.partially_paid;\n  }\n\n  // Helper method to get cash collected applications count\n  static async getCashCollectedApplications(\n    emiMonth: string, \n    filters?: Partial<FilterState>\n  ): Promise<number> {\n    const summary = await this.getSummaryStatus(emiMonth, filters);\n    return summary.cash_collected;\n  }\n\n  // Helper method to get customer deposited applications count\n  static async getCustomerDepositedApplications(\n    emiMonth: string, \n    filters?: Partial<FilterState>\n  ): Promise<number> {\n    const summary = await this.getSummaryStatus(emiMonth, filters);\n    return summary.customer_deposited;\n  }\n\n  // Helper method to get paid pending approval applications count\n  static async getPaidPendingApprovalApplications(\n    emiMonth: string, \n    filters?: Partial<FilterState>\n  ): Promise<number> {\n    const summary = await this.getSummaryStatus(emiMonth, filters);\n    return summary.paid_pending_approval;\n  }\n\n  // Helper method to get foreclose applications count\n  static async getForecloseApplications(\n    emiMonth: string, \n    filters?: Partial<FilterState>\n  ): Promise<number> {\n    const summary = await this.getSummaryStatus(emiMonth, filters);\n    return summary.foreclose;\n  }\n\n  // Helper method to get paid rejected applications count\n  static async getPaidRejectedApplications(\n    emiMonth: string, \n    filters?: Partial<FilterState>\n  ): Promise<number> {\n    const summary = await this.getSummaryStatus(emiMonth, filters);\n    return summary.paid_rejected;\n  }\n\n  // Helper method to get collection metrics\n  static async getCollectionMetrics(\n    emiMonth: string, \n    filters?: Partial<FilterState>\n  ): Promise<{\n    total: number;\n    paid: number;\n    unpaid: number;\n    partiallyPaid: number;\n    cashCollected: number;\n    customerDeposited: number;\n    paidPendingApproval: number;\n    foreclose: number;\n    paidRejected: number;\n  }> {\n    const summary = await this.getSummaryStatus(emiMonth, filters);\n    \n    return {\n      total: summary.total,\n      paid: summary.paid,\n      unpaid: summary.unpaid,\n      partiallyPaid: summary.partially_paid,\n      cashCollected: summary.cash_collected,\n      customerDeposited: summary.customer_deposited,\n      paidPendingApproval: summary.paid_pending_approval,\n      foreclose: summary.foreclose,\n      paidRejected: summary.paid_rejected,\n    };\n  }\n}\n"],"names":["SummaryService","emiMonth","filters","queryParams","ptpDateValues","label","response","API_BASE_URL","summary"],"mappings":"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"}